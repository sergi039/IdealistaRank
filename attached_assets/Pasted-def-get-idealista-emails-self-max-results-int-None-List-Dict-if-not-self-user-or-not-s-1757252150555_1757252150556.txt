def get_idealista_emails(self, max_results: int = None) -> List[Dict]:
    if not self.user or not self.password:
        logger.error("IMAP credentials not configured")
        return []
    email_data = []
    max_results = max_results or self.max_emails

    try:
        with IMAPClient(self.host, port=self.port, ssl=self.ssl) as client:
            client.login(self.user, self.password)

            # Gmail: работаем из All Mail, ярлык — через X-GM-RAW
            if 'gmail' in self.host.lower():
                try:
                    client.select_folder('[Gmail]/All Mail', readonly=True)
                    logger.info("Selected [Gmail]/All Mail")
                except Exception:
                    client.select_folder('INBOX', readonly=True)
                    logger.info("Fallback to INBOX")
                gm_query = 'label:Idealista from:noresponder@idealista.com subject:(alerta OR nuevos OR "saved search") newer_than:60d'
                try:
                    uids = client.search(['X-GM-RAW', gm_query])
                except Exception:
                    logger.warning("X-GM-RAW not available, falling back to ALL")
                    uids = client.search(['ALL'])
            else:
                client.select_folder(self.folder or "INBOX", readonly=True)
                uids = client.search(['ALL'])

            if self.last_seen_uid > 0:
                uids = [u for u in uids if u > self.last_seen_uid]
            uids = sorted(uids)[:max_results]
            if not uids:
                logger.info("No new emails found")
                return []

            fetch_data = client.fetch(uids, ['RFC822', 'INTERNALDATE'])
            for uid in uids:
                try:
                    raw_email = fetch_data[uid][b'RFC822']
                    msg = message_from_bytes(raw_email)

                    html_parts = self._extract_html_parts(msg)
                    body = '\n'.join(html_parts) or self._extract_text_parts(msg)
                    if not body:
                        continue

                    subject = self._decode_header_value(msg.get('Subject', ''))
                    email_content = {'subject': subject, 'body': body, 'message_id': f"imap_{uid}"}
                    parsed = self.email_parser.parse_idealista_email(email_content)
                    if parsed:
                        parsed['source_email_id'] = f"imap_{uid}"
                        parsed['email_received_at'] = fetch_data[uid][b'INTERNALDATE']
                        email_data.append(parsed)
                except Exception as e:
                    logger.error(f"Failed to process UID {uid}: {e}")
                    continue

            # Persist last seen
            if uids:
                self.last_seen_uid = max(uids)
                self._save_last_seen_uid(self.last_seen_uid)
                logger.info(f"Saved last seen UID: {self.last_seen_uid}")

    except Exception as e:
        logger.error(f"Failed to fetch via IMAP: {e}")

    return email_data
